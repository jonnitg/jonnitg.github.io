{"version":3,"file":"static/webpack/static/development/pages/index.js.d122ed96e188464a7052.hot-update.js","sources":["webpack:///./src/context/pointer-classes.context.tsx","webpack:///./src/elements/mouse-tracker/mouse-tracker.element.tsx"],"sourcesContent":["import { createContext, useState } from 'react';\n\nconst initState = {};\n\nconst PointerClassesContext = createContext(initState);\n\nfunction PointerClassesProvider({ children }) {\n  const [classes, setClasses] = useState(initState);\n\n  return (\n    <PointerClassesContext.Provider value={{ classes, setClasses }}>\n      {children}\n    </PointerClassesContext.Provider>\n  );\n}\n\nexport { PointerClassesContext, PointerClassesProvider };\n","import React, { createRef, useEffect, useContext } from 'react';\nimport { PointerClassesContext } from '@context/pointer-classes.context';\nimport { MousePosition } from '@hooks/useMousePointer';\nimport styles from './mouse-tracker.module.scss';\n\ntype MouseTrackerProps = {\n  mousePosition: MousePosition;\n};\nconst MouseTracker = ({\n  mousePosition = { x: null, y: null, isOver: false },\n}: MouseTrackerProps) => {\n  const { classes } = useContext(PointerClassesContext);\n  const mouseRef = createRef<HTMLDivElement>();\n\n  useEffect(() => {\n    if (mouseRef.current) {\n      const { x, y, isOver } = mousePosition;\n      mouseRef.current.style.transform = `translate3d(${x}px, ${y}px,0px)`;\n      if (isOver) {\n        mouseRef.current.style.transform = `matrix(1,0,0,1,${x}, ${y})`;\n      }\n    }\n  }, [mousePosition.x, mousePosition.y]);\n\n  return <div className={styles['mouse-pointer']} ref={mouseRef} />;\n};\n\nexport default MouseTracker;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AAEA;AACA;AAIA;AAEA;AAAA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;A","sourceRoot":""}